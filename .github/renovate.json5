{
  $schema: 'https://docs.renovatebot.com/renovate-schema.json',
  extends: [
    'config:recommended',
    'docker:enableMajor',
    ':disableRateLimiting',
    ':dependencyDashboard',
    ':semanticCommits',
    ':automergeBranch',
  ],
  dependencyDashboard: true,
  dependencyDashboardTitle: 'Renovate Dashboard ðŸ¤–',
  suppressNotifications: [
    'prEditedNotification',
    'prIgnoreNotification',
  ],
  rebaseWhen: 'conflicted',
  timezone: 'Europe/London',
  schedule: [
    'after 10pm every weekday',
    'before 5am every weekday',
    'every weekend',
  ],
  ignorePaths: [
    '**/*.sops.*',
  ],
  flux: {
    fileMatch: [
      '(^|/)kubernetes/.+\\.ya?ml(?:\\.j2)?$',
    ],
  },
  'helm-values': {
    fileMatch: [
      '(^|/)kubernetes/.+\\.ya?ml(?:\\.j2)?$',
    ],
  },
  helmfile: {
    fileMatch: [
      '(^|/)helmfile\\.ya?ml(?:\\.j2)?$',
    ],
  },
  kubernetes: {
    fileMatch: [
      '(^|/)kubernetes/.+\\.ya?ml(?:\\.j2)?$',
    ],
  },
  kustomize: {
    fileMatch: [
      '(^|/)kustomization\\.ya?ml(?:\\.j2)?$',
    ],
  },
  pip_requirements: {
    fileMatch: [
      '(^|/)[\\w-]*requirements(-\\w+)?\\.(txt|pip)(?:\\.j2)?$',
    ],
  },
  commitMessageTopic: '{{depName}}',
  commitMessageExtra: 'to {{newVersion}}',
  commitMessageSuffix: '',
  packageRules: [
    {
      description: [
        'Auto-merge container digests updates for trusted containers',
      ],
      matchDatasources: [
        'docker',
      ],
      automerge: true,
      automergeType: 'branch',
      matchUpdateTypes: [
        'digest',
      ],
      matchPackageNames: [
        '/ghcr.io/bjw-s/',
        '/ghcr.io/onedr0p/',
      ],
    },
    {
      matchDatasources: [
        'docker',
      ],
      automerge: true,
      automergeType: 'branch',
      ignoreTests: true,
      matchUpdateTypes: [
        'minor',
        'patch',
        'digest',
      ],
    },
    {
      matchDatasources: [
        'helm',
      ],
      automerge: true,
      automergeType: 'branch',
      ignoreTests: true,
      matchUpdateTypes: [
        'minor',
      ],
      matchPackageNames: [
        'kube-prometheus-stack',
        'renovate',
        'node-feature-discovery',
        'reloader',
        'snapshot-controller',
      ],
    },
    {
      matchDatasources: [
        'helm',
      ],
      automerge: true,
      automergeType: 'branch',
      ignoreTests: true,
      matchUpdateTypes: [
        'patch',
      ],
    },
    {
      matchDatasources: [
        'helm',
      ],
      automerge: false,
      automergeType: 'branch',
      ignoreTests: true,
      matchUpdateTypes: [
        'patch',
      ],
      matchPackageNames: [
        'cilium',
      ],
    },
    {
      description: [
        'Loose versioning for non-semver packages',
      ],
      matchDatasources: [
        'docker',
      ],
      versioning: 'loose',
      matchPackageNames: [
        '/changedetection/',
        '/plex/',
        '/qbittorrent/',
      ],
    },
    {
      description: [
        'Custom versioning for minio',
      ],
      matchDatasources: [
        'docker',
      ],
      versioning: 'regex:^RELEASE\\.(?<major>\\d+)-(?<minor>\\d+)-(?<patch>\\d+)T.*Z$',
      matchPackageNames: [
        '/minio/',
      ],
    },
    {
      description: [
        'Flux Group',
      ],
      groupName: 'Flux',
      matchDatasources: [
        'docker',
        'github-tags',
      ],
      versioning: 'semver',
      group: {
        commitMessageTopic: '{{{groupName}}} group',
      },
      separateMinorPatch: true,
      matchPackageNames: [
        '/fluxcd/',
      ],
    },
    {
      description: [
        'Talos Group',
      ],
      groupName: 'Talos',
      matchDatasources: [
        'docker',
      ],
      group: {
        commitMessageTopic: '{{{groupName}}} group',
      },
      separateMinorPatch: true,
      matchPackageNames: [
        '/siderolabs/talosctl/',
        '/siderolabs/installer/',
      ],
    },
    {
      matchDatasources: [
        'helm',
      ],
      commitMessageTopic: 'chart {{depName}}',
    },
    {
      matchDatasources: [
        'docker',
      ],
      commitMessageTopic: 'image {{depName}}',
    },
    {
      matchDatasources: [
        'docker',
      ],
      matchUpdateTypes: [
        'major',
      ],
      commitMessagePrefix: 'feat(container)!: ',
      commitMessageTopic: '{{depName}}',
      commitMessageExtra: ' ( {{currentVersion}} â†’ {{newVersion}} )',
    },
    {
      matchDatasources: [
        'docker',
      ],
      matchUpdateTypes: [
        'minor',
      ],
      semanticCommitType: 'feat',
      semanticCommitScope: 'container',
      commitMessageTopic: '{{depName}}',
      commitMessageExtra: '( {{currentVersion}} â†’ {{newVersion}} )',
    },
    {
      matchDatasources: [
        'docker',
      ],
      matchUpdateTypes: [
        'patch',
      ],
      semanticCommitType: 'fix',
      semanticCommitScope: 'container',
      commitMessageTopic: '{{depName}}',
      commitMessageExtra: '( {{currentVersion}} â†’ {{newVersion}} )',
    },
    {
      matchDatasources: [
        'docker',
      ],
      matchUpdateTypes: [
        'digest',
      ],
      semanticCommitType: 'chore',
      semanticCommitScope: 'container',
      commitMessageTopic: '{{depName}}',
      commitMessageExtra: '( {{currentDigestShort}} â†’ {{newDigestShort}} )',
    },
    {
      matchDatasources: [
        'helm',
      ],
      matchUpdateTypes: [
        'major',
      ],
      commitMessagePrefix: 'feat(helm)!: ',
      commitMessageTopic: '{{depName}}',
      commitMessageExtra: '( {{currentVersion}} â†’ {{newVersion}} )',
    },
    {
      matchDatasources: [
        'helm',
      ],
      matchUpdateTypes: [
        'minor',
      ],
      semanticCommitType: 'feat',
      semanticCommitScope: 'helm',
      commitMessageTopic: '{{depName}}',
      commitMessageExtra: '( {{currentVersion}} â†’ {{newVersion}} )',
    },
    {
      matchDatasources: [
        'helm',
      ],
      matchUpdateTypes: [
        'patch',
      ],
      semanticCommitType: 'fix',
      semanticCommitScope: 'helm',
      commitMessageTopic: '{{depName}}',
      commitMessageExtra: '( {{currentVersion}} â†’ {{newVersion}} )',
    },
    {
      matchDatasources: [
        'github-releases',
        'github-tags',
      ],
      matchUpdateTypes: [
        'major',
      ],
      commitMessagePrefix: 'feat(github-release)!: ',
      commitMessageTopic: '{{depName}}',
      commitMessageExtra: '( {{currentVersion}} â†’ {{newVersion}} )',
    },
    {
      matchDatasources: [
        'github-releases',
        'github-tags',
      ],
      matchUpdateTypes: [
        'minor',
      ],
      semanticCommitType: 'feat',
      semanticCommitScope: 'github-release',
      commitMessageTopic: '{{depName}}',
      commitMessageExtra: '( {{currentVersion}} â†’ {{newVersion}} )',
    },
    {
      matchDatasources: [
        'github-releases',
        'github-tags',
      ],
      matchUpdateTypes: [
        'patch',
      ],
      semanticCommitType: 'fix',
      semanticCommitScope: 'github-release',
      commitMessageTopic: '{{depName}}',
      commitMessageExtra: '( {{currentVersion}} â†’ {{newVersion}} )',
    },
    {
      matchManagers: [
        'github-actions',
      ],
      matchUpdateTypes: [
        'major',
      ],
      commitMessagePrefix: 'feat(github-action)!: ',
      commitMessageTopic: '{{depName}}',
      commitMessageExtra: '( {{currentVersion}} â†’ {{newVersion}} )',
    },
    {
      matchManagers: [
        'github-actions',
      ],
      matchUpdateTypes: [
        'minor',
      ],
      semanticCommitType: 'feat',
      semanticCommitScope: 'github-action',
      commitMessageTopic: '{{depName}}',
      commitMessageExtra: '( {{currentVersion}} â†’ {{newVersion}} )',
    },
    {
      matchManagers: [
        'github-actions',
      ],
      matchUpdateTypes: [
        'patch',
      ],
      semanticCommitType: 'fix',
      semanticCommitScope: 'github-action',
      commitMessageTopic: '{{depName}}',
      commitMessageExtra: '( {{currentVersion}} â†’ {{newVersion}} )',
    },
    {
      matchUpdateTypes: [
        'major',
      ],
      labels: [
        'type/major',
      ],
    },
    {
      matchUpdateTypes: [
        'minor',
      ],
      labels: [
        'type/minor',
      ],
    },
    {
      matchUpdateTypes: [
        'patch',
      ],
      labels: [
        'type/patch',
      ],
    },
    {
      matchDatasources: [
        'docker',
      ],
      addLabels: [
        'renovate/container',
      ],
    },
    {
      matchDatasources: [
        'helm',
      ],
      addLabels: [
        'renovate/helm',
      ],
    },
    {
      matchDatasources: [
        'github-releases',
        'github-tags',
      ],
      addLabels: [
        'renovate/github-release',
      ],
    },
    {
      matchManagers: [
        'github-actions',
      ],
      addLabels: [
        'renovate/github-action',
      ],
    },
  ],
  customManagers: [
    {
      customType: 'regex',
      description: [
        'Process custom dependencies',
      ],
      fileMatch: [
        '(^|/)kubernetes/.+\\.ya?ml(?:\\.j2)?$',
      ],
      matchStrings: [
        'datasource=(?<datasource>\\S+) depName=(?<depName>\\S+)( repository=(?<registryUrl>\\S+))?\\n.+: (&\\S+\\s)?(?<currentValue>\\S+)',
      ],
      datasourceTemplate: '{{#if datasource}}{{{datasource}}}{{else}}github-releases{{/if}}',
    },
  ],
}
